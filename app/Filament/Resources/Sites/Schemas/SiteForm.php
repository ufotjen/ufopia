<?php

namespace App\Filament\Resources\Sites\Schemas;

use App\Filament\Components\TranslationTabs;               // âœ… juiste helper
use App\Filament\Forms\Components\Reusable\I18nControls;
use App\Models\Menu;
use App\Models\Theme;
use Filament\Forms\Components\KeyValue;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Toggle;
use Filament\Schemas\Components\Utilities\{Get, Set};
use Filament\Schemas\Schema;
use Illuminate\Support\Str;

class SiteForm
{
    public static function configure(Schema $schema): Schema
    {
        return $schema
            ->components([
                Select::make('owner_id')
                    ->label(__('Eigenaar'))
                    ->relationship('owner', 'name')
                    ->searchable()->preload()->native(false)->required(),

                TextInput::make('name')
                    ->label(__('Naam'))
                    ->required()
                    ->live(debounce: 400)
                    ->afterStateUpdated(function (Set $set, Get $get, ?string $state) {
                        if ($get('sync_slug')) {
                            $set('slug', Str::slug((string) $state));
                        }
                    }),

                Toggle::make('sync_slug')
                    ->label('Koppel slug aan naam')
                    ->default(true)
                    ->inline(false)
                    ->dehydrated(false),

                ...I18nControls::make(),

                TranslationTabs::form(['slug', 'team-meta'],
                    schemaForLocale: fn (string $loc, bool $isFallback) => [
                        KeyValue::make("team_meta.$loc")
                            ->label('Team metadata')
                            ->keyLabel('key')->valueLabel('value')
                            ->reorderable(false),
                    ]
                ),

                Toggle::make('is_active')->label('Actief')->required(),

                TextInput::make('primary_domain')->label('Primair domein'),
                TextInput::make('extra_domains')->label('Extra domeinen (comma-separated)'),

                TextInput::make('default_locale')
                    ->label('Default locale')
                    ->default(config('app.fallback_locale', 'en')),

                TextInput::make('locales')
                    ->label('Locales (comma-separated)')
                    ->default(implode(',', config('app.supported_locales', ['en', 'nl', 'fr', 'de']))),

                Select::make('theme_key')
                    ->label('Theme')
                    ->options(fn () => Theme::orderBy('key')->pluck('key', 'key'))
                    ->searchable()->preload(),

                KeyValue::make('theme_overrides')->label('Theme overrides'),

                TextInput::make('timezone')->label('Timezone'),
                TextInput::make('contact_email')->label('Contact e-mail')->email(),

                KeyValue::make('feature_flags')->label('Feature Flags'),
                KeyValue::make('options')->label('Opties'),

                Select::make('header_menu_id')
                    ->label('Default Header Menu')
                    ->searchable()->preload()->native(false)->nullable()
                    ->options(fn (Get $get) => ($siteId = $get('id') ?? $get('../id'))
                        ? Menu::where('site_id', $siteId)->get()
                            ->mapWithKeys(fn ($m) => [$m->id => $m->getTranslation('title', app()->getLocale())])
                            ->all()
                        : []),

                Select::make('footer_menu_id')
                    ->label('Default Footer Menu')
                    ->searchable()->preload()->native(false)->nullable()
                    ->options(fn (Get $get) => ($siteId = $get('id') ?? $get('../id'))
                        ? Menu::where('site_id', $siteId)->get()
                            ->mapWithKeys(fn ($m) => [$m->id => $m->getTranslation('title', app()->getLocale())])
                            ->all()
                        : []),

                Select::make('sidebar_menu_id')
                    ->label('Default Sidebar Menu')
                    ->searchable()->preload()->native(false)->nullable()
                    ->options(fn (Get $get) => ($siteId = $get('id') ?? $get('../id'))
                        ? Menu::where('site_id', $siteId)->get()
                            ->mapWithKeys(fn ($m) => [$m->id => $m->getTranslation('title', app()->getLocale())])
                            ->all()
                        : []),
            ]);
    }
}
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































